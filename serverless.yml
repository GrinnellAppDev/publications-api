##
# serverless.yml
#
# Copyright (C) 2016  Grinnell AppDev.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
##

# For full config options, check the docs:
#    https://serverless.com/framework/docs/

service: publications
frameworkVersion: "=1.3.0"

globals:
  stage: ${opts:stage, self:provider.stage}
  region: ${opts:region, self:provider.region}

  apiIdsByStageName:
    dev: 14dvrdkbu2
  apiId: ${self:globals.apiIdsByStageName.${self:globals.stage}}
  apiModelsUrl:
    https://apigateway.amazonaws.com/restapis/${self:globals.apiId}/models


provider:
  name: aws
  runtime: python2.7
  stage: dev
  region: us-west-2

  # forwards compatibility, see
  # https://serverless.com/framework/docs/providers/aws/guide/functions#log-group-resources
  cfLogs: true


  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:DescribeTable
        - dynamodb:query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:*"

  # you can define service wide environment variables here
  # environment:
  #   variable1: value1


# you can add packaging information here
package:
  # include:
  #   - include-me.py
  #   - include-me-dir/**
  exclude:
    - .idea/**
    - .vscode/**
    - test-events/**


functions:
  publications_list:
    handler: functions.publications_list
    desription: List all publications.
    events:
      - http: GET /publications
  # publications_post:
  #   handler: functions.publications_post
  #   desription: Add a new publication.
  #   events:
  #     - http: POST /publications
  # publications_patch:
  #   handler: functions.publications_patch
  #   desription: Update an exsisting publication.
  #   events:
  #     - http: PATCH /publications/{publicationId}
  # publications_delete:
  #   handler: functions.publications_delete
  #   desription: Delete a publication.
  #   events:
  #     - http: DELETE /publications/{publicationId}

  # series_list:
  #   handler: functions.series_list
  #   desription: List all series.
  #   events:
  #     - http: GET /publications/{publicationId}/series
  # series_post:
  #   handler: functions.series_post
  #   description: Create a new series.
  #   events:
  #     - http: POST /publications/{publicationId}/series
  # series_get:
  #   handler: functions.series_get
  #   desription: Get an series through an ID.
  #   events:
  #     - http: GET /publications/{publicationId}/series/{seriesId}
  # series_patch:
  #   handler: functions.series_patch
  #   desription: Update an exsisting series.
  #   events:
  #     - http: PATCH /publications/{publicationId}/series/{seriesId}
  # series_delete:
  #   handler: functions.series_delete
  #   desription: Delete an series.
  #   events:
  #     - http: DELETE /publications/{publicationId}/series/{seriesId}

  # articles_list:
  #   handler: functions.articles_list
  #   desription: List all articles.
  #   events:
  #     - http: GET /publications/{publicationId}/articles
  articles_post:
    handler: functions.articles_post
    description: Create a new article.
    events:
      - http: POST /publications/{publicationId}/articles
  articles_get:
    handler: functions.articles_get
    desription: Get an article through an ID.
    events:
      - http: GET /publications/{publicationId}/articles/{articleId}
  # articles_patch:
  #   handler: functions.articles_patch
  #   desription: Update an exsisting article.
  #   events:
  #     - http: PATCH /publications/{publicationId}/articles/{articleId}
  # articles_delete:
  #   handler: functions.articles_delete
  #   desription: Delete an article.
  #   events:
  #     - http: DELETE /publications/{publicationId}/articles/{articleId}

  # images_post:
  #   handler: functions.images_post
  #   description: Create a new image.
  #   events:
  #     - http: POST /images
  # images_get:
  #   handler: functions.images_get
  #   desription: Get an image through an ID.
  #   events:
  #     - http: GET /images/{imageId}
  # images_put:
  #   handler: functions.images_put
  #   desription: Update an exsisting image.
  #   events:
  #     - http: PUT /images/{imageId}
  # images_delete:
  #   handler: functions.images_delete
  #   desription: Delete a image.
  #   events:
  #     - http: DELETE /images/{imageId}


resources:
  Resources: ${file(resources/Resources.yml)}
